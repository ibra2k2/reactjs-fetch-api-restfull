{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","search","setSearch","shown","setShown","isLoading","setIsLoading","useEffect","axios","get","then","response","console","log","catch","error","toggleShown","name","prevShown","type","value","onChange","e","preventDefault","target","length","document","getElementById","style","visibility","placeholder","id","color","map","item","key","onClick","capital","population","area","region","languages","lan","currencies","cu","src","flag","alt","width","height","border","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0dAsIeA,MAnIf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIqBN,oBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,KAUbC,qBAAU,WAERD,GAAa,GAEbE,IAECC,IAFD,gDAE8CR,IAE7CS,MAAK,SAAAC,GACJC,QAAQC,IAAI,4BAA6BF,GACzCX,EAAQW,EAASZ,SAGlBe,OAAM,SAAAC,GACLH,QAAQC,IAAI,cAAeE,EAAMJ,aAInCH,IACCC,IADD,mDACiDR,IAGhDS,MAAK,SAAAC,GACJC,QAAQC,IAAI,+BAAgCF,GAC5CX,EAAQW,EAASZ,SAGlBe,OAAM,SAAAC,GACLH,QAAQC,IAAI,iBAAkBE,EAAMJ,aAGtCH,IAGCC,IAHD,oDAGkDR,IACjDS,MAAK,SAAAC,GACJC,QAAQC,IAAI,gCAAiCF,GAC7CX,EAAQW,EAASZ,SAGlBe,OAAM,SAAAC,GACLH,QAAQC,IAAI,kBAAmBE,EAAMJ,eAItC,CAACV,IAEJ,IAYMe,EAAc,SAACC,GACnBb,GAAS,SAAAc,GAAS,O,yVAAA,IACbA,EADa,eAEfD,GAAOC,EAAUD,SAUtB,OACE,kBAAC,WAAD,KAEGZ,EAAa,4CACd,8CACgB,2BAAOc,KAAO,OAAQC,MAASnB,EAAQoB,SA9B/B,SAACC,GAC3BA,EAAEC,iBACFrB,EAAUoB,EAAEE,OAAOJ,OAEfE,EAAEE,OAAOJ,MAAMK,OAAS,EAC1BC,SAASC,eAAe,QAAQC,MAAMC,WAAa,UAEnDH,SAASC,eAAe,QAAQC,MAAMC,WAAa,UAuBqCC,YAAc,2BACpG,2BAAOC,GAAK,OAAOH,MAZN,CACjBC,WAAY,SACZG,MAAO,QAUH,6CAIH,6BACCjC,EAAKkC,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKjB,MACXiB,EAAKjB,KAAQ,4BAAQc,GAAK,OAAOK,QAAU,kBAAMpB,EAAYkB,EAAKjB,QAArD,QAA4E,KAAK,6BAC/F,6BAAK,gCAASiB,EAAKjB,OAClBd,EAAM+B,EAAKjB,MACZ,wCACSiB,EAAKG,QAAQ,6BADtB,cAEYH,EAAKI,WAAW,6BAF5B,QAGMJ,EAAKK,KAAK,6BAHhB,UAIQL,EAAKM,OAAO,6BACjBN,EAAKO,UAAUR,KAAI,SAAAS,GAAG,OACrB,4BACE,yCACWA,EAAIzB,UAIlBiB,EAAKS,WAAWV,KAAI,SAAAW,GAAE,OACrB,4BACE,wCACUA,EAAG3B,UASnB,yBAAK4B,IAAOX,EAAKY,KAAMC,IAAM,OAAOC,MAAQ,MAAMC,OAAS,KAAKC,OAAS,uBAExE,YCnHSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.8dc17eb9.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState('');\n  const [shown, setShown] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  // const [isError, setIsError] = useState(true)\n\n\n\n\n  useEffect(() => {\n    // console.log('Effect');\n    setIsLoading(false); \n    // setIsError(false);\n    axios\n    // .get(`https://restcountries.eu/rest/v2/capital/${search}`)\n    .get(`https://restcountries.eu/rest/v2/name/${search}`) \n    // .get(`https://restcountries.eu/rest/v2/currency/${search}`)\n    .then(response => {\n      console.log('Promise fulfiled for Name', response);\n      setData(response.data);\n      \n    }) \n    .catch(error => {\n      console.log('Name error:', error.response);\n      // setIsError(false);\n    });\n    \n    axios\n    .get(`https://restcountries.eu/rest/v2/capital/${search}`)\n    //.get(`https://restcountries.eu/rest/v2/name/${search}`) \n    // .get(`https://restcountries.eu/rest/v2/currency/${search}`)\n    .then(response => {\n      console.log('Promise fulfiled for Capital', response);\n      setData(response.data);\n      \n    })\n    .catch(error => {\n      console.log('Capital error:', error.response);\n      // setIsError(false);\n    });\n    axios\n    //.get(`https://restcountries.eu/rest/v2/capital/${search}`)\n    //.get(`https://restcountries.eu/rest/v2/name/${search}`) \n    .get(`https://restcountries.eu/rest/v2/currency/${search}`)\n    .then(response => {\n      console.log('Promise fulfiled for Currency', response);\n      setData(response.data);\n      \n    })\n    .catch(error => {\n      console.log('Currency error:', error.response);\n      // setIsError(false);\n    });\n    \n  }, [search]);\n\n  const handelSearchChanged = (e) => {\n    e.preventDefault();\n    setSearch(e.target.value);\n\n    if (e.target.value.length < 3){\n      document.getElementById(\"text\").style.visibility = \"visible\";\n    }else{\n      document.getElementById(\"text\").style.visibility = \"hidden\";\n    }\n  }\n\n\n  const toggleShown = (name) => {\n    setShown(prevShown => ({\n      ...prevShown,\n      [name]:!prevShown[name]\n    }));\n  }\n\n  const labelStyle = {\n    visibility: 'hidden',\n    color: 'red'\n  };\n\n\n  return (\n    <Fragment>\n      {/* {isError && <div>something went wrong...</div>} */}\n      {isLoading ? (<div>Loading ...</div>): (\n      <div>\n        Find Country: <input type = 'text'  value = {search} onChange = {handelSearchChanged} placeholder = \"Search Country info...\"/>\n        <label id = \"text\" style={labelStyle}>Too many matches, Specify another letter</label>\n      </div> \n      )} \n      \n     <div> \n     {data.map(item => (\n        <ul key={item.name}>\n          {item.name ? (<button id = \"show\" onClick ={() => toggleShown(item.name)}>Show</button>): null}<br/>\n          <div><strong>{item.name}</strong></div>\n          {shown[item.name] ? \n          <div>\n          Capital:{item.capital}<br/>\n          Population:{item.population}<br/>\n          Area:{item.area}<br/>\n          Region:{item.region}<br/>\n            {item.languages.map(lan => (\n              <ul>\n                <li>\n                Languages:{lan.name}\n               </li>\n              </ul>\n            ))}\n            {item.currencies.map(cu => (\n              <ul>\n                <li>\n                Currency:{cu.name}\n               </li>\n              </ul>\n            ))}\n            {/* <ul>\n            <li>Languages:{item.languages[0].name} | Native Name:{item.languages[0].nativeName}<br/></li>\n            <li>Currency:{item.currencies[0].code}<br/></li>\n            </ul> */}\n\n          <img src = {item.flag} alt = \"flag\" width = \"150\" height = \"90\" border = \"1px solid #000000\" />\n          </div>\n          :null}\n        </ul>\n      ))}\n      </div>\n    </Fragment>\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}